from cnvrgp.config.error_messages import NOT_A_VOLUME_OBJECT, NOT_A_DATASET_LIST_OBJECT
from cnvrgp.context import SCOPE
from cnvrgp.config import routes
from cnvrgp.errors import CnvrgArgumentsError

from cnvrgp.modules.base.workflows_base import WorkflowsBase
from cnvrgp.modules.dataset import Dataset
from cnvrgp.modules.volumes.volume import Volume
from cnvrgp.modules.workflows import Workspace, NotebookType
from cnvrgp.utils.validators import validate_types_in_list


class WorkspacesClient(WorkflowsBase):
    def __init__(self, project):
        super().__init__(Workspace, "NotebookSession", project._context)

        scope = self._context.get_scope(SCOPE.PROJECT)
        self._route = routes.WORKFLOWS_BASE.format(scope["organization"], scope["project"])

    def create(
            self,
            title=None,
            templates=None,
            notebook_type=NotebookType.JUPYTER_LAB,
            volume=None,
            datasets=None,
            *args,
            **kwargs):
        """
        Creates a new workspace with the given name
        @param title: Name of the workflow
        @param templates: List of template names to be used
        @param notebook_type: The type of the created notebook. Use NotebookType enum
        @param volume: A volume to attach to this workspace. (type: Volume object).
        @param datasets: List of datasets to connect with the workspace.
        @param kwargs: rest of optional attributes for creation
            image: Image object to create workspace with
        TODO: Add a list of optional attributes
        @return: The newly created workflow object
        """
        kwargs = {
            "notebook_type": notebook_type,
            **kwargs
        }

        if datasets and not validate_types_in_list(datasets, Dataset):
            raise CnvrgArgumentsError({"datasets": NOT_A_DATASET_LIST_OBJECT})
        elif datasets:
            kwargs["job_datasets"] = [ds.as_request_params() for ds in datasets]

        if volume and not isinstance(volume, Volume):
            raise CnvrgArgumentsError({"volume": NOT_A_VOLUME_OBJECT})
        elif volume:
            kwargs["external_disk_slug"] = volume.slug

        return super().create(title, templates, *args, **kwargs)
