import datetime
import os
import time
import json
import sys
from cnvrgp.config import routes
from cnvrgp.modules.base.workflow_instance_base import WorkflowInstanceBase
from cnvrgp.modules.images.image import Image
from cnvrgp.proxy import Proxy, HTTP
from cnvrgp.context import Context, SCOPE
from cnvrgp.utils.url_utils import urljoin


class EndpointKind:
    WEB_SERVICE = 0
    STREAM = 1
    BATCH = 2


class EndpointEnvSetup:
    PYTHON2 = "python_2"
    PYTHON3 = "python_3"
    PYSPARK = "pyspark"
    RENDPOINT = "r_endpoint"


class Endpoint(WorkflowInstanceBase):

    available_attributes = {
        "kind": str,
        "compute": str,
        "updated_at": str,
        "last_deployment": dict,
        "deployments": dict,
        "deployments_count": int,
        "templates": list,
        "endpoint_url": str,
        "current_deployment": dict,
        "compute_name": str,
        "image_name": str,
        "image_slug": str,
        "url": str,
        "api_key": str,
        "created_at": datetime,
        "max_replica": int,
        "min_replica": int,
        "export_data": bool,
        "conditions": dict,
        **WorkflowInstanceBase.available_attributes
    }

    def __init__(self, context=None, slug=None, attributes=None):
        self._context = Context(context=context)

        # Set current context scope to current project
        if slug:
            self._context.set_scope(SCOPE.ENDPOINT, slug)

        self._scope = self._context.get_scope(SCOPE.ENDPOINT)

        self._proxy = Proxy(context=self._context)
        self._route = routes.WORKFLOW_BASE.format(
            self._scope["organization"],
            self._scope["project"],
            self._scope["endpoint"]
        )

        self._attributes = attributes or {}
        self._type = "Endpoint"
        self.slug = self._scope["endpoint"]

    def update_version(self, file_name=None, function_name=None, prep_file=None, prep_function=None, **kwargs):
        """
        Update the endpoint version
        @param file_name: Name of new file
        @param function_name: Name of new function
        @param prep_file: Name of new preprocess file
        @param prep_function: Name of new preprocess function
        @param kwargs:
        image: Image object to update endpoint with
        commit: Commit where files are.
        git_branch: Git branch where files are
        git_commit: Git commit where files are
        integer desired_percentage: Traffic ratio for canary rollout
        gunicorn_config: Array of key values in the following format: ["key=value", "key=value"]
        flask_config: Array of key values in the following format: ["key=value", "key=value"]
        kafka_brokers: List of kafka brokers
        kafka_input_topics: List of topics to register as input
        kafka_output_topics: List of topics to register as output
        input_file: Boolean. Does endpoint accepts file
        @return: updated endpoint
        """
        update_version_url = urljoin(self._route, routes.UPDATE_MODEL_VERSION)

        attributes = {
            "workflow_slug": self.slug,
            "file_name": file_name,
            "function_name": function_name,
            "prep_file": prep_file,
            "prep_function": prep_function,
            **kwargs
        }

        if isinstance(kwargs.get("image"), Image):
            attributes["image_slug"] = kwargs.get("image").slug

        res_attributes = self._proxy.call_api(
            route=update_version_url,
            http_method=HTTP.POST,
            payload=attributes
        ).attributes

        self._attributes = {**self._attributes, **res_attributes}
        return self

    def log_metric(self, name, y: float = None, x=None):
        params = {}
        try:
            params[name] = float(y)
            params["y"] = float(y)
        except Exception as e:
            print("ERROR {}".format(e), file=sys.stderr)
            return
        params["x"] = x
        params["cnvrg_metric_name"] = name
        log = {
            "job_id": self.slug,
            "job_type": self._type,
            "owner": self._context.get_scope(SCOPE.ENDPOINT)["organization"],
            "project": self._context.get_scope(SCOPE.ENDPOINT)["project"],
            "model": os.environ.get("CNVRG_MODEL_NAME", "unknown"),
            "event_time": time.time(),
            **params
        }
        print(json.dumps(log))
        sys.stdout.flush()

    def sync(self, commit_msg=None):
        raise NotImplementedError()
