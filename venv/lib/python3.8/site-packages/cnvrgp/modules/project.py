from cnvrgp.config import routes
from cnvrgp.modules.volumes.volumes_client import VolumesClient
from cnvrgp.modules.workflows import WorkspacesClient, WebappsClient, EndpointsClient, ExperimentsClient
from cnvrgp.proxy import Proxy, HTTP
from cnvrgp.context import Context, SCOPE
from cnvrgp.modules.base.data_owner import DataOwner


class Project(DataOwner):

    available_attributes = {
        "slug": str,
        "title": str,
        "git": bool,
        "start_commit": str,
        "commit": str,
        "git_url": str,
        "git_branch": str,
        "num_files": int,
        "last_commit": str
    }

    def __init__(self, context=None, slug=None, attributes=None):
        # Init data attributes
        super().__init__()

        self._context = Context(context=context)

        # Set current context scope to current project
        if slug:
            self._context.set_scope(SCOPE.PROJECT, slug)

        scope = self._context.get_scope(SCOPE.PROJECT)

        self._proxy = Proxy(context=self._context)
        self._route = routes.PROJECT_BASE.format(scope["organization"], scope["project"])
        self._attributes = attributes or {}
        self.slug = scope["project"]

        self._init_clients()

    def save(self):
        pass

    def delete(self):
        """
        Deletes the current project
        @return: None
        """
        self._proxy.call_api(route=self._route, http_method=HTTP.DELETE)

    def _init_clients(self):
        self.workspaces = WorkspacesClient(self)
        self.endpoints = EndpointsClient(self)
        self.webapps = WebappsClient(self)
        self.experiments = ExperimentsClient(self)
        self.volumes = VolumesClient(self)
