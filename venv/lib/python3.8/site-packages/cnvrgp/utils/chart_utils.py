from cnvrgp.config.error_messages import SERIES_NOT_A_LIST
from cnvrgp.errors import CnvrgArgumentsError


class Chart:
    def __init__(self, key, chart_type, **kwargs):
        """
        Represents a chart
        @param key: Identifier of the chart.
        @param chart_type: Type of the chart, from ChartTypes Enum.
        @param kwargs: additional arguments:
        title, group, step, x_axis, y_axis, x_ticks, y_ticks, stops, max, min, colors
        """
        self.series_list = []
        self.chart_type = chart_type
        self.key = key
        self.kwargs = kwargs

    def add_series(self, name, series):
        """
        Adds series to the chart
        @param name: name of the series
        @param series: list of (x,y) tuples.
        In case of Heatmap, list of tuples that form a matrix. e.g, 3x3 matrix: [(1,2,3),(4,5,6),(7,8,9)]
        @return: None
        """
        if not isinstance(series, list):
            raise CnvrgArgumentsError({
                "series": SERIES_NOT_A_LIST
            })

        data = self._convert_series(series)

        self.series_list.append({
            "name": name,
            "data": data
        })

    def clean_chart(self):
        """
        Clears the chart next time it's send to the server
        @return: None
        """
        self.chart_type = "none"

    def to_dict(self):
        """
        @return: The chart's attributes as dictionary
        """
        return {
            "chart_type": self.chart_type,
            "key": self.key,
            "series": self.series_list,
            **self.kwargs
        }

    def _convert_series(self, series):
        """
        Converts series to proper format before adding to series_list.
        In base class, returns series as is
        @param series: Series to convert
        @return: The series converted
        """
        return series


class Heatmap(Chart):
    def __init__(self, key, **kwargs):
        super().__init__(key=key, chart_type="heatmap", **kwargs)

    def _convert_series(self, series):
        """
        Converts series to proper format for heatmap, before adding to series_list.
        @param series: Series to convert
        @return: The series converted
        """
        matrix = []
        for y in range(len(series)):
            for x in range(len(series[0])):
                matrix.append((x, y, series[y][x]))
        return matrix


class BarChart(Chart):
    def __init__(self, key, **kwargs):
        super().__init__(key=key, chart_type="bar", **kwargs)


class ScatterPlot(Chart):
    def __init__(self, key, **kwargs):
        super().__init__(key=key, chart_type="scatter", **kwargs)

