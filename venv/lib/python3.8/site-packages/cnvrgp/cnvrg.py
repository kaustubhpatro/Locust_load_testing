from cnvrgp._version import __version__
from cnvrgp.config import routes
from cnvrgp.config.error_messages import FAULTY_VALUE

from cnvrgp.errors import CnvrgError
from cnvrgp.context import Context, SCOPE
from cnvrgp.modules.images.images_client import ImagesClient
from cnvrgp.modules.users.users_client import UsersClient
from cnvrgp.modules.projects_client import ProjectsClient
from cnvrgp.modules.datasets_client import DatasetsClient
from cnvrgp.modules.resources.machines_client import MachinesClient
from cnvrgp.modules.resources.spark_drivers_client import SparkDriversClient
from cnvrgp.modules.resources.clusters_client import ClustersClient
from cnvrgp.modules.organization.organization_settings import OrganizationSettings
from cnvrgp.proxy import Proxy, HTTP
from cnvrgp.utils.json_api_format import JAF
from cnvrgp.utils.validators import is_email_valid


class Cnvrg:
    def __init__(self, domain=None, email=None, password=None, organization=None, suppress_exceptions=False):
        # TODO: decide on how suppressing will work
        if suppress_exceptions:
            pass

        self._context = Context(
            domain=domain,
            user=email,
            password=password,
            organization=organization
        )

        self.check_version_compatibility(__version__)

        self._proxy = Proxy(context=self._context)

        self._init_clients()
        self._organization = organization or self._context.get_scope("organization")

    def me(self):
        """
        Retrieves information about the current user
        @return: A dictionary representing the current logged in user
        """
        users_client = UsersClient(self._context.domain, self._context.token)
        return users_client.me()

    def set_organization(self, organization):
        """
        Replaces the organization with the given one
        @param organization: Organization name to connect to
        @return: None
        """
        self._context.set_scope(scope=SCOPE.ORGANIZATION, slug=organization)
        self._init_clients()
        self._organization = organization

    def check_version_compatibility(self, version):
        pass

    def add_user(self, email, role):
        """
        Add a new user to the organization
        @param email: User email
        @param role: Role to add
        """
        if not is_email_valid(email):
            raise CnvrgError(FAULTY_VALUE.format(email))

        self._proxy.call_api(
            route=routes.ORGANIZATION_USERS.format(self._organization),
            http_method=HTTP.POST,
            payload=JAF.serialize(type="users", attributes={"email": email, "role": role})
        )

    def revoke_user(self, email):
        """
        Revoke user access to organization
        @param email: User's email
        """
        if not is_email_valid(email):
            raise CnvrgError(FAULTY_VALUE.format(email))

        self._proxy.call_api(
            route=routes.ORGANIZATION_USERS.format(self._organization),
            http_method=HTTP.DELETE,
            payload=JAF.serialize(type="users", attributes={"email": email})
        )

    def _init_clients(self):
        """
        Sets up the clients that are exposed to the user.
        @return: None
        """
        try:
            self.projects = ProjectsClient(self)
            self.datasets = DatasetsClient(self)
            self.images = ImagesClient(self)
            self.settings = OrganizationSettings(self)
            self.machines = MachinesClient(self)
            self.clusters = ClustersClient(self)
            self.spark_drivers = SparkDriversClient(self)

        except CnvrgError:
            # TODO: Surpress exceptions here
            pass
