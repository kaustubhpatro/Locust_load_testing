import os
import json

from cnvrgp.proxy import HTTP
from cnvrgp.utils.url_utils import urljoin
from cnvrgp.data.remote_files_handler import RemoteFilesHandler
from cnvrgp.utils.storage_utils import get_files_and_dirs_recursive


class RemoteFileDeleter(RemoteFilesHandler):
    def __init__(self, data_owner, queue_size=5000, chunk_size=1000, force=False, files=None):
        """
        Multithreaded remote file deleter - deleting files from server if they deleted locally
        @param data_owner: Cnvrg dataset / project object
        @param chunk_size: File meta chunk size to fetch from the server
        @param force: Force rewrite existing files
        @param queue_size: Max number of file meta to put in queue
        """
        self.files = files
        self.files_to_delete = []

        super().__init__(
            data_owner,
            num_workers=1,
            queue_size=queue_size,
            chunk_size=chunk_size,
            force=force
        )

    def _collector_function(self, page_after=None):
        """
        Function to collect exists files metadata from server to check if they deleted locally
        @param page_after: The id of the next file that the iteration of the pagination should start from
        @return: Should return array of files metadata
        """
        if self.files:
            files_index = page_after - 1
            return {
                "file_dict": self.files[files_index:(files_index + self.chunk_size + 1)],
                "total_files": len(self.files),
                "next": page_after + self.chunk_size
            }
        else:
            data = {
                "filter": json.dumps({
                    "operator": 'OR',
                    "conditions": [
                        {
                            "key": 'fullpath',
                            "operator": 'like',
                            "value": "*",
                        }
                    ],
                })
            }

            response = self.data_owner._proxy.call_api(
                route="{}?{}".format(
                    urljoin(self.data_owner._route, "commits", self.data_owner.local_commit, "files"),
                    "page[after]={}&page[size]=1000&sort=id".format(page_after)
                ),
                http_method=HTTP.GET,
                payload=data
            )

            file_dict = []
            for file in response.items:
                file_attr = dict(file.attributes)
                fullpath = file_attr["fullpath"]
                local_path = "{}/{}".format(self.data_owner.working_dir, fullpath)
                if os.path.isfile(local_path):
                    self.progress_queue.put(file_attr)
                else:
                    file_dict.append(file_attr)

            return {
                "file_dict": file_dict,
                "total_files": response.meta["total"],
                "next": response.meta["next"]
            }

    def _handle_file_function(self, local_path, **kwargs):
        """
        Function to that collect 1000 files that need to be deleted and then delete them from remote
        @param local_path: File location locally
        @param kwargs: Needs to be fullpath of the file
        @return: None
        """
        self.files_to_delete.append(kwargs["fullpath"])
        if len(self.files_to_delete) >= 1000 or len(self.files_to_delete) >= (self.total_files - self.handled_files):
            try:
                self.data_owner._proxy.call_api(
                    urljoin(self.data_owner._route, "commits", self.data_owner.current_commit, "delete_files"),
                    http_method=HTTP.POST,
                    payload={"files": self.files_to_delete}
                )
            finally:
                self.handle_queue.task_done()
                for f in self.files_to_delete:
                    self.progress_queue.put(f)
                self.files_to_delete = []