from azure.storage.blob import BlobServiceClient

from cnvrgp.utils.retry import retry
from cnvrgp.utils.storage_utils import create_dir_if_not_exists
from cnvrgp.data.clients.base_storage_client import BaseStorageClient


class AzureStorage(BaseStorageClient):
    def __init__(self, storage_meta):
        super().__init__(storage_meta)

        props = self._decrypt_dict(storage_meta, keys=[
            "container",
            "storage_access_key",
            "storage_account_name",
        ])
        account_name = props["storage_account_name"]
        account_key = props["storage_access_key"]
        container = props["container"]

        self.access_key = (
            "DefaultEndpointsProtocol=https;"
            "AccountName={};"
            "AccountKey={};"
            "EndpointSuffix=core.windows.net"
        ).format(
            account_name,
            account_key
        )
        self.container_name = container
        self.service = self._get_service()

    @retry(log_error=True)
    def upload_single_file(self, local_path, object_path):
        try:
            client = self.service.get_blob_client(container=self.container_name, blob=object_path)
            with open(local_path, "rb") as local_file:
                client.upload_blob(local_file, overwrite=True)
        except Exception as e:
            print(e)

    @retry(log_error=True)
    def download_single_file(self, local_path, object_path):
        try:
            client = self.service.get_blob_client(container=self.container_name, blob=object_path)
            create_dir_if_not_exists(local_path)
            with open(local_path, "wb") as local_file:
                local_file.write(client.download_blob().readall())
        except Exception as e:
            print(e)

    def _get_service(self):
        return BlobServiceClient.from_connection_string(self.access_key)
